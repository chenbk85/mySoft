%{
#include <iostream>
#include <sstream>
#include <FlexLexer.h>

#include "query_exp.h"
#include "document.h"

#define OBJ document_helper
class ccFlexLexer;
%}

%skeleton "lalr1.cc"
%require "2.3"
%defines

%pure_parser	/* no use for c++ parser */
%define "parser_class_name" "query_parser"
%parse-param {ccFlexLexer* lexer}
%parse-param {query_exp<OBJ>** exp_pp}
%lex-param {ccFlexLexer* lexer}

%union {
	long ival;
	double dval;
	char* sval;
	query_exp<OBJ>* qexp;	
}

%{
#include "ccFlexLexer.hpp"
static int yylex(yy::query_parser::semantic_type* yylval, ccFlexLexer* lexer);
%}

%token AND OR NOT COLON COMMA LE GE LT GT EQ NE LP RP LS RS END

%left OR AND
%left NOT

%token <ival> INT
%token <dval> DOUBLE
%token <sval> ID STRING
%type  <qexp> query expr fieldexp

%%
query: expr END { *exp_pp = $1; YYACCEPT; }
	;
expr: fieldexp { $$ = $1; }
	| LP expr RP { $$ = $2; }
	| expr AND expr { $$ = new and_query_exp<OBJ>($1, $3); }
	| expr OR  expr { $$ = new or_query_exp<OBJ>($1, $3); }
	| expr NOT expr { $$ = new not_query_exp<OBJ>($1, $3); }
	;

fieldexp: ID LT INT { $$ = new unary_field_exp<OBJ, long, field_less<long> >($1, $3); }
	| ID LE INT { $$ = new unary_field_exp<OBJ, long, field_less_equal<long> >($1, $3); }
	| ID GT INT { $$ = new unary_field_exp<OBJ, long, field_greater<long> >($1, $3); }
	| ID GE INT { $$ = new unary_field_exp<OBJ, long, field_greater_equal<long> >($1, $3); }
	| ID EQ INT { $$ = new unary_field_exp<OBJ, long, field_equal_to<long> >($1, $3); }
	| ID NE INT { $$ = new unary_field_exp<OBJ, long, field_not_equal_to<long> >($1, $3); }
	| ID COLON LP INT COMMA INT RP { $$ = new binary_field_exp<OBJ, long, field_between_ee<long> >($1, $4, $6); }
	| ID COLON LP INT COMMA INT RS { $$ = new binary_field_exp<OBJ, long, field_between_ei<long> >($1, $4, $6); }
	| ID COLON LS INT COMMA INT RP { $$ = new binary_field_exp<OBJ, long, field_between_ie<long> >($1, $4, $6); }
	| ID COLON LS INT COMMA INT RS { $$ = new binary_field_exp<OBJ, long, field_between_ii<long> >($1, $4, $6); }
	;
fieldexp: ID LT DOUBLE { $$ = new unary_field_exp<OBJ, double, field_greater<double> >($1, $3); }
	| ID LE DOUBLE { $$ = new unary_field_exp<OBJ, double, field_greater_equal<double> >($1, $3); }
	| ID GT DOUBLE { $$ = new unary_field_exp<OBJ, double, field_less<double> >($1, $3); }
	| ID GE DOUBLE { $$ = new unary_field_exp<OBJ, double, field_less_equal<double> >($1, $3); }
	| ID EQ DOUBLE { $$ = new unary_field_exp<OBJ, double, field_equal_to<double> >($1, $3); }
	| ID NE DOUBLE { $$ = new unary_field_exp<OBJ, double, field_not_equal_to<double> >($1, $3); }
	| ID COLON LP DOUBLE COMMA DOUBLE RP { $$ = new binary_field_exp<OBJ, double, field_between_ee<double> >($1, $4, $6); }
	| ID COLON LP DOUBLE COMMA DOUBLE RS { $$ = new binary_field_exp<OBJ, double, field_between_ei<double> >($1, $4, $6); }
	| ID COLON LS DOUBLE COMMA DOUBLE RP { $$ = new binary_field_exp<OBJ, double, field_between_ie<double> >($1, $4, $6); }
	| ID COLON LS DOUBLE COMMA DOUBLE RS { $$ = new binary_field_exp<OBJ, double, field_between_ii<double> >($1, $4, $6); }
	;

%%

void yy::query_parser::error(const yy::query_parser::location_type& loc, const std::string& msg)
{
	std::cerr << loc << ": " << msg << std::endl;
}

static int yylex(yy::query_parser::semantic_type* yylval, ccFlexLexer* lexer)
{
	return lexer->yylex(yylval);
}

