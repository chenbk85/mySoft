#ifndef __MSTAR_DEFINITION__H
#define __MSTAR_DEFINITION__H

//mstar lock type define
enum mstar_lock_type
{
	MSTAR_LOCK_NONE=0,
	MSTAR_LOCK_EX,
	MSTAR_ULOCK_EX,
	MSTAR_LOCK_EX_ULOCK,
	MSTAR_LOCK_EX_HOLDING,
};

//mstar business type define
/*enum mstar_business_type
{
	BUSINESS_TYPE_BPO 		= 0,
	BUSINESS_TYPE_BPO_CALC 		= 1,
	BUSINESS_TYPE_RTQ		= 2,
	BUSINESS_TYPE_SECRESEARCH,
	BUSINESS_TYPE_TS,
	BUSINESS_TYPE_OTHER,
};*/

enum mstar_business_type
{
	BUSINESS_TYPE_BPO               = 0,
	BUSINESS_TYPE_BPO_CALC          = 1,
	BUSINESS_TYPE_RTQ               = 2,
	BUSINESS_TYPE_SECRESEARCH  		= 3,
	BUSINESS_TYPE_COMMON   			= 4,
	BUSINESS_TYPE_PMS    			= 5,
	BUSINESS_TYPE_TS    			= 6,
	BUSINESS_TYPE_OTHER,
};

//production type
enum mstar_production_type
{
    PRODUCTION_TYPE_BPO             = 1,
    PRODUCTION_TYPE_QS              = 2,
    PRODUCTION_TYPE_PMS             = 3,
    PRODUCTION_TYPE_AWSEE           = 4,
    PRODUCTION_TYPE_COMMON          = 5,
//     PRODUCTION_TYPE_CIM_ATTACHMENT  = 5,
//     PRODUCTION_TYPE_CIM_NOTE        = 6,
//     PRODUCTION_TYPE_REPORT          = 7,
		PRODUCTION_TYPE_MTS  = 6,
    PRODUCTION_TYPE_BUTT
};

//object type
enum mstar_object_type
{
    OBJECT_TYPE_TRANSACTION	= 1,
    OBJECT_TYPE_POSITION		= 2,
    OBJECT_TYPE_PORTFOLIO		= 3,
    OBJECT_TYPE_QUOTESPEED		= 4,
    OBJECT_TYPE_INTRADATEDATA	= 5,
    OBJECT_TYPE_COMMON		= 6,
    OBJECT_TYPE_ACCOUNTPROFILE	= 7,
    OBJECT_TYPE_SETTING		= 8,
    OBJECT_TYPE_MTS		= 9,
    OBJECT_TYPE_BUTT
};

//=============================== error code define ==================================================================

//chunk server Error Code Define
enum EnumChunkErrorCode
{
	E_SUCCESS = 0,

	E_CHUNK_SUCCESS_NOCHANGE = 1001,
	E_CHUNK_SUCCESS_CHANGED,
	E_CHUNK_ALLOCATE_FAILED,
	E_CHUNK_WRITE_DATA_FAILED,
	E_CHUNK_INVALID_PARAM,

	E_CHUNK_READ_DATA_FAILED,
	E_CHUNK_INVALID_POSITION,
	E_CHUNK_CKSUM_FAILED,
	E_CHUNK_INTERNAL_ERROR,
	E_CHUNK_OPEN_FILE_FAILED,

	E_CHUNK_MALLOC_FAILED,
	E_CHUNK_DATA_ERROR,

	E_CHUNK_LSEEK_FAILED,
	E_CHUNK_TOO_BIG_DATA
};

//Index server Error Code Define
enum EnumIndexErrorCode {
    E_INDEX_OK = 0,

	E_INDEX_NOT_IMPL = 2001,
	E_INDEX_INVALID_IN_PROTO,
	E_INDEX_NOT_FOUND,
	E_INDEX_EXIST,
	E_INDEX_SYSTEM,

	E_INDEX_ALLOC_CHUNK,
	E_INDEX_OVERLOAD,
	E_INDEX_KEY_BUSY,
	E_INDEX_KEY_NOT_LOCKED,
	E_INDEX_REALLOC_NO_NEED,

	E_INDEX_NO_SPACE,
	E_INDEX_NO_SERVER,
	E_INDEX_INTERNAL,
	E_INDEX_READ_ONLY,
	E_INDEX_HS_SERVICE_MISMATCH,
	E_INDEX_HS_STATUS_INVALID,
	E_INDEX_HS_FAILED,
    // add by fengpu gao
    E_OK_PARTIAL_CONTENT,
    E_NO_CONTENT,
    E_SCN_NOTFOUND,
    E_DR_EXIT,
    // end add by fengpu gao
};

//StorageAPI Error Code Define
enum EnumStorageAPIErrorCode
{
	E_STCLTAPI_SUCCESS                 = 3001,	//Success
	E_STCLTAPI_CHECK_READ_IDX_TIMEOUT  = 3002,	//read idx time out
	E_STCLTAPI_CHECK_READ_CHX_TIMEOUT  = 3003,	//read chx time out
	E_STCLTAPI_CHECK_UPDATE_IDX_TIMEOUT= 3004,	//update idx time out
	E_STCLTAPI_CHECK_UPDATE_CHX_TIMEOUT= 3005,	//update chx time out
	E_STCLTAPI_READ_ALLCHUNK_DOWN      = 3006,	//all chunk down
	E_STCLTAPI_INVALID_CLIENT_PARAM    = 3007,	//Invalid Parameter(s)
	E_STCLTAPI_INVALID_INDEX_PARAM     = 3008,	//Invalid Parameter(s)
	E_STCLTAPI_INVALID_CHUNK_PARAM     = 3009,	//Invalid Parameter(s)
	E_STCLTAPI_DATA_NOT_MATCH_CONS     = 3010,	//The data is wrong, such as the key is mismatch,const lock
	E_STCLTAPI_DATA_NOT_MATCH_DEFINE   = 3011,	//The data is wrong, such as the key is mismatch,define lock
	E_STCLTAPI_MALLOC_FAILED           = 3012,	//No memory to malloc/new
	E_STCLTAPI_CHECK_DELETE_IDX_TIMEOUT= 3013,	//delete idx time out
	E_STCLTAPI_CHECK_DELETE_CHX_TIMEOUT= 3014,	//delete chx time out
	E_STCLTAPI_CHECK_LOCK_IDX_TIMEOUT= 3015,	//lock idx time out
	E_STCLTAPI_CHECK_UNLOCK_IDX_TIMEOUT= 3016,	//unlock idx time out
	E_STCLTAPI_CHECK_STAT_IDX_TIMEOUT= 3017,	//stat idx time out
	E_STCLTAPI_CHECK_STAT_CHX_TIMEOUT= 3018,	//stat chx time out
};

//business logic layer Error Code Define
enum EnumDataApiErrorCode
{
 	E_DA_PARSE_FAILED              = 4001,
  	E_DA_INITDATABASE_FAILED,
   	E_DA_EXECSQL_FAILED,
    	E_DA_INITCLIENT_FAILED,
     	E_DA_UPDATE_TIMEOUT,

      	E_DA_READ_TIMEOUT,
       	E_DA_SOCKET_CLOSED,
        E_DA_PACKAGESIZE_ERROR,
	E_DA_CREATEMEMORY_FAILED,
	E_DA_EXISTREPEAT,

	E_DA_INEXISTENTFILE = 4011,
	E_DA_OPERATION_TIMED_OUT,
	E_DA_CALC_NOT_COMPLETE,
	E_DA_SERIALIZE_FAILED,
	E_DA_INVALIDDATETICKS,

	E_DA_INVALIDDATE = 4016,
	E_DA_NO_ROUTE,
	E_DA_SYSTEM_BUSY,
	E_DA_SOURCE_ID_TOO_LONG,
	E_DA_NONEXISTENT_IMPORTID,

	E_SIC_PARSEFAILED = 4021,
	E_SIC_INITDATABASEFAILED,
	E_SIC_EXECSQLFAILED,
	E_DA_NOT_PORTFOLIOTS,
	E_DA_SEND_MQ_DATA_FAILED,

	E_DA_NOT_EXCHANGERATE = 4026,
	E_DA_PARAMETER_ERROR,
	E_DA_ENCODE_FAILED,
	E_DA_DECODE_FAILED,
};

enum EnumRTQErrorCode
{
 	E_RTQ_PARSE_FAILED              = 5001,
	E_RTQ_CREATEMEMORY_FAILED,
	E_RTQ_OPERATION_TIMED_OUT,
	E_RTQ_PACKAGESIZE_ERROR,
	E_RTQ_SOCKET_CLOSED,

	E_RTQ_INITCLIENT_FAILED,
	E_RTQ_READ_TIMEOUT,
	E_RTQ_UPDATE_TIMEOUT,
	E_RTQ_INPUTOLDDATE,
	E_RTQ_MAX_LENGTH,
	E_RTQ_EXCH_NOT_FOUND,
	E_RTQ_SPLIT = 5100,
	E_RTQ_CANCEL_SPLIT,
};

enum EnumTSErrorCode
{
 	E_TS_PARSE_FAILED = 6001,
	E_TS_CREATEMEMORY_FAILED,
	E_TS_ERR_INVALID_IN_PROTO,

	E_TS_GET_ACCESS_FAILED,
	E_TS_DATA_CONVERSION,

	E_TS_READ_FAILED,
	E_TS_WRITE_FAILED,
	E_TS_DELETE_FAILED,
	E_TS_NO_DATA,
	E_TS_DATE_FAILED,
};

enum EnumSecurityServerErrorCode
{
	E_SS_INVALID_KEY = 7001,
	E_SS_INVALID_IN_PROTO,
	E_SS_GET_FAILED,
	E_SS_SERIALIZE_FAILED,
	E_SS_DELETE_FAILED,

	E_SS_CREATETHREAD_FAILED,
	E_SS_ALL_FAILED,
};

enum EnumSearchEngineErrorCode
{
	E_SE_INVALID_CONDITION = 7100,
	E_SE_INVALID_CMD,
	E_SE_DECODE_FAILED,
	E_SE_ENCODE_FAILED,
	E_SE_INVALID_INIT,

	E_SE_INVALID_SEARCHVALUE = 7105,
	E_SE_PARSE_QUERY_FAILED,
	E_SE_SEARCH_FAILED,
	E_SE_EXCEPTION,
	E_SE_CACHE_NOTREADY,

	E_SE_INITINDEX_FAILED = 7110,
	E_SE_INVALID_PARAM,
};
enum SMART_SEARCH_ERROR_CODE
{
	// smart-search fcgi
    E_CGI_PARSE_XML_FAILED = 201200,
    E_CGI_SERVER_INTERNAL_ERROR,
	E_CGI_INIT_SE_SERVER,
	E_CGI_SERIALIZE_GB,
	E_CGI_RESERIALIZE,
    E_CGI_NO_MEMORY,
	
	// smart-search service
	E_SS_DECODE_FAILED,
	E_SS_SERIALIZE_GB,
	E_SS_RESERIALIZE,
	E_SS_NO_MEMORY,
	E_SS_PARAMETER,
	E_SS_MERGE_ERROR,
	E_SS_NO_RESULT,
	E_SS_INTERNAL,
	E_SS_PARTIAL,
};

enum SEFCGI_CODE
{
	E_SECGI_CREATE_PARSER = 7300,
	E_SECGI_CREATE_OUTPUTER,
	E_SECGI_PARSE_QUERY,
	E_SECGI_GETPARAM,
	E_SECGI_GET_QUERY_STR,
	E_SECGI_PARSE_QUERY_STR,
	E_SECGI_GET_POST_DATA,
	E_SECGI_PARSE_POST_DATA,
	E_SECGI_UNSUPPORTED_VERSION,
	E_SECGI_GET_SE_RESPONSE,
	E_SECGI_PARSE_SE_RESPONSE,
	E_SECGI_UNSUPPORTED_SYNTAX,
	E_SECGI_UNSUPPORTED_VALUE_TYPE,
	E_SECGI_MAX,
};

enum AUTO_COMPLETE_ERROE_CODE
{
	E_PARSE_FAILED = 32001,
	E_KEY_WORD_EMPTY,
	E_AC_SOURCE,
	E_AC_NO_MEMORY,
	E_PRODUCTION,
	E_OUTFMT,
	E_QUERY_CMD,
	E_VERSION,
	E_RETURN_DATA_POINTS,
	E_SEARCH_DATA_POINTS,
	E_START,
	E_COUNT,
	E_SOURCE_ID,
	E_GET_QUERY,
	E_GET_OUTPUTER,
	E_MAKE_QUERY,
	E_SERIALIZE_GB,
	E_PARSE_GB,
	E_NOT_FOUND_FROM_SE,
	E_INIT_SE_SERVER,
	E_PARSE_SOLR_RESPONSE,
	E_GET_SOLR_RESPONSE,
	E_PARSE_SOLR_XML,
	E_CREATE_PARSER,
	E_INVALID_LOCAL,
	E_INVALID_CALLBACK_NAME,
};



//soap Error Code Define
enum EnumSoapErrorCode
{
	E_SOAP_FORBIDDEN  = 8001,
};

enum EnumDBwrapErrorCode
{
    E_DBWRAP_ERR_INVALID_IN_PROTO = 9000,
    E_DBWRAP_ERR_INVAILD_DB_ID,
    E_DBWRAP_ERR_SQL_STATEMENT,
    E_DBWRAP_ERR_INTERNAL,
};
enum EnumSecurityInfoCacheErrorCode
{
	E_SECURITY_INFO_PLUGIN_SERIALIZE = 9100,
	E_SECURITY_INFO_PLUGIN_DESERIALIZE,
	E_SECURITY_INFO_PLUGIN_HAVE_NOT_DB,
	E_SECURITY_PARSE_FAILED,
	E_SECURITY_EMPTY,
};
//stat Error Code Define
enum EnumStatErrorCode
{
	E_STAT_KEYNOTMATCHNUMBERTYPE = 9999,

};

enum e_mstar_dcc_err
{
	E_CONFILE_OPEN = 12000,
	E_CONFILE_LOGPROPERTY,
	E_INIT_LOG,
	E_CACHEMAN_INIT,
	E_CACHEMAN_GETCACHE,
	E_NO_CACHEMAN,
	E_INVALIDCMD,
	E_PROTOCOL_ENCODE,
	E_PROTOCOL_DECODE,
	E_PROTOCOL_CONS_RES,
	E_NO_KEY,
	E_KEY_SIZE,
	E_PLUGIN_NOTFOUND,
	E_CONF_NOT_FOUND_UNSUPPORT_PID,
	E_NOT_ENOUGH_MEM,
	E_LOCK_GET,
	E_NULL_PLUGIN,
	E_TIMEOUT_UPDATE,
	E_DELETE,
	E_KEY_NOT_FOUND,
	E_SYS_API_CALL,
	E_TIMEFORMAT,
	E_MEMCACHED_GET,
	E_MEMCACHED_SET,
	E_MEMCACHED_REPLACE,
	E_MEMCACHED_CLONE,
	E_MEMCACHED_POOL_POP,
	E_REF_COUNT,
	E_KEY_EXPIRED,
	E_SIZE_TOO_BIG,
	E_SIZEAREA_ID,
	E_LRU_ALLOC,
	E_NOT_IMPLEMENT,
	E_PLUGIN_WRONG_DATA,
	E_LOAD_ASYNC,
	E_LOAD_ASYNC_NOT_SUPPORT,
	E_ALLOC_FAILED,
	E_EXCEPTION,
	E_KEY_MAP,
};

enum EnumOverFlowErrorCode
{
	E_OVER_FLOW = 13000,
};

enum EnumIdserviceCode
{
	E_FCGI_PARSE = 15000,
};

// ssd cache Error Code Define
enum EnumSSDErrorCode
{
    E_SSD_CREATE_DIR_FAILED = 16000,
    E_SSD_OPEN_FILE_FAILED,
    E_SSD_FILE_SIZE_ERROR,
    E_SSD_ALLOCATE_FAILED,
    E_SSD_WRITE_DATA_FAILED,
    E_SSD_READ_DATA_FAILED,

    E_SSD_PATH_NOT_FOUND = 16006,
    E_SSD_FILE_NOT_FOUND,
    E_SSD_DATA_SIZE_FAILED,
    E_SSD_TRANSACTION_FAILED,
    E_SSD_CKSUM_FAILED,

    E_SSD_CONNECT_INDEX_FAILED = 16011,
    E_SSD_INVALID_PARAM,
    E_SSD_INVALID_KEY_LEN,
    E_SSD_NULL_POINTER
};


enum EnumGemfireErrorCode
{
	E_GEMFIRE_ILLEGEL_ARGUMENT = 17000,
	E_GEMFIRE_CACHE_LOAD_EXCEPTION,
	E_GEMFIRE_CACHE_SERVER_EXCEPTION,
	E_GEMFIRE_NOT_CONNECTED,
	E_GEMFIRE_TIMEOUT,
	E_GEMFIRE_REFION_DESTORYED,
	E_GEMFIRE_ILLEGEL_REFION,
	E_GEMFIRE_ILLEGEL_KEY,
	E_GEMFIRE_ILLEGEL_DATA,
	E_GEMFIRE_UNKNOWN_EXCEPTION
};
//============================= error code define end =================================================================
#endif //!__MSTAR_DEFINITION__H
